import numpy as np
import matplotlib.pyplot as plt

num_trials = 10000000

timber_params_list = [
  [3.582, 0.378, 0.576, 0.689, 2.05],
  [3.582, 0.378, 0.576, 0.689, 2.05],
  [3.582, 0.378, 0.576, 0.689, 2.05],
  [3.582, 0.378, 0.576, 0.689, 2.05],
  [3.582, 0.378, 0.576, 0.689, 2.05],
  [2.921, 0.378, 0.576, 0.689, 2.05],
  [4.243, 0.378, 0.576, 0.689, 2.05],
  [3.582, 0.169, 0.576, 0.689, 2.05],
  [3.582, 0.587, 0.576, 0.689, 2.05],
  [3.582, 0.378, 0.349, 0.689, 2.05],
  [3.582, 0.378, 0.804, 0.689, 2.05],
  [3.582, 0.378, 0.576, 0.505, 2.05],
  [3.582, 0.378, 0.576, 0.872, 2.05],
  [3.582, 0.378, 0.576, 0.689, 0.39],
  [3.582, 0.378, 0.576, 0.689, 3.72],
  [3.582, 0.378, 0.576, 0.689, 16.0],
  ]

ns_list = [
   [4, 4],
   [4, 1],
   [4, 7],
   [0, 4],
   [8, 4],
   [4, 4],
   [4, 4],
   [4, 4],
   [4, 4],
   [4, 4],
   [4, 4],
   [4, 4],
   [4, 4],
   [4, 4],
   [4, 4],
   [4, 4],
  ]

results = [
  # descend_welfare, descend_revenue, opt_welfare
  [101.91692856382885, 72.98670609563145, 101.938899214105, 50.126441791616486, 0.4251593624999507, 0.4217613999999823],
  [78.27107250862737, 52.87522967751254, 78.37878212364672, 44.28211380688988, 0.5349091200000494, 0.5245439000000381],
  [114.62550723661228, 84.1791287649831, 115.52438661878116, 52.78260552459544, 0.3844147545454769, 0.365999381818157],
  [96.99401938316075, 64.48854128897072, 96.99401938316075, 59.87736809195675, 0.663813550000066, 0.663813550000066],
  [105.59365212552169, 78.47995545023097, 105.6133301810047, 46.87754677362397, 0.32551615000002804, 0.32304846666663517],
  [49.68163084165859, 36.00250335152537, 49.69078002753157, 24.890733670835182, 0.3333459125000136, 0.33144911250002],
  [204.50788269464226, 144.82142903137094, 204.54374837465528, 99.00128461623231, 0.5191291000000177, 0.5142948250000048],
  [86.48287109504233, 63.40274919039084, 86.4880606576504, 44.28767708959563, 0.4291990375000072, 0.4283481750000024],
  [123.23003190751288, 85.61855051237146, 123.31735769337057, 57.31941739741204, 0.4136562374999696, 0.4071445625000325],
  [72.48110390767756, 59.29214516971039, 72.48908494230892, 44.92475711710201, 0.29728183749996123, 0.2952213250000117],
  [150.29569736943768, 91.90738140025546, 150.66154066618662, 59.008488996086854, 0.5492269250000508, 0.5406123375000512],
  [103.7634901511884, 73.0646979846884, 103.78593416975427, 50.1234018480289, 0.3368491625000164, 0.3349153375000079],
  [99.86812562030832, 73.10023050995083, 99.88259393752287, 50.12463072768854, 0.5347861750000349, 0.5286721124999884],
  [108.6126259017788, 75.90725419828289, 108.6372459640421, 51.78292095065699, 0.6519174125000099, 0.6441955000000836],
  [96.88022530138174, 70.13693967195086, 96.8981675316571, 48.45641584233328, 0.3420914499999836, 0.34005821249999607],
  [73.8126472923019, 53.663226509427474, 73.82760651752817, 36.17680786766464, 0.1804224499999889, 0.18004361249998976],
  ]

max_std_error = 0.025405642557910252

std_errors = [
  # descend_welfare, descend_revenue, opt_welfare
  [0.011257416950233115, 0.004057156040495357, 0.011263226310235332, 0.0032373751820680098, 6.850687300138631e-05, 6.827394351534527e-05],
  [0.009599219339245343, 0.0031446909798176445, 0.009610218246692693, 0.00357555240783326, 7.893189949004837e-05, 7.926596953036313e-05],
  [0.01122444682011136, 0.0037895376676907234, 0.011742672741063812, 0.0029050193646678536, 5.843913969370821e-05, 6.254639419822402e-05],
  [0.011816475473861332, 0.004078474213519899, 0.011816475473861332, 0.00540533290501468, 8.377962333134836e-05, 8.377962333134836e-05],
  [0.010909557441058142, 0.004060078538473711, 0.010916369452868321, 0.0024621092096576602, 5.807224596752196e-05, 5.796137113002426e-05],
  [0.005285748794870967, 0.0019303036716082087, 0.005285928353524033, 0.00153753111215568, 5.729144621089352e-05, 5.702332308987126e-05],
  [0.023492953429043218, 0.008304642850534137, 0.023494339465884025, 0.006618600233038583, 7.566788379743657e-05, 7.547534443429054e-05],
  [0.008948537744069278, 0.0034201040991985532, 0.008949210593892547, 0.0027902553382699873, 7.120484909169752e-05, 7.116703663840068e-05],
  [0.014433110727306268, 0.0048787195947449045, 0.014492789938687224, 0.003830739704194721, 6.235162197374714e-05, 6.21753528578266e-05],
  [0.004517451799165235, 0.0019360341121570804, 0.004516587375588208, 0.001594651662845252, 5.061758658535797e-05, 5.0060641247702146e-05],
  [0.02507745331219864, 0.007039202157184247, 0.025405642557910252, 0.0059006397046161615, 7.334895806016144e-05, 7.550377990942509e-05],
  [0.012361359587108503, 0.00416874279497789, 0.012366704226341825, 0.0033636287427846576, 5.68293879873126e-05, 5.66572366117534e-05],
  [0.009705109532129238, 0.003936180649895255, 0.009704737454183652, 0.003095990320322201, 7.927899718022696e-05, 7.87005870188195e-05],
  [0.01306574433548302, 0.004442558092526247, 0.013073606915518524, 0.0035746587538739286, 7.76709352007477e-05, 7.819368869608162e-05],
  [0.010332325327619038, 0.0037752124294866073, 0.01033314495355646, 0.0030060950024278837, 5.856938152077819e-05, 5.8297085216462096e-05],
  [0.00780173758652765, 0.002890702917926219, 0.007803000777472642, 0.002239293608671904, 2.7059851982655764e-05, 2.695837047598393e-05],
  ]

# roberts-sweeting results
# (from running their matlab code)
rs_results = [
  # sequential welfare, sequential revenue, simultaneous welfare, simultaneous revenue
  [101.1496, 72.5724,  99.4027,  71.2584],
  [77.9112,  52.3396,  76.5191,  50.958],
  [114.3238, 85.2241,  112.2773, 83.8897],
  [96.3176,  64.515,   95.4909,  64.4184],
  [104.6606, 77.6487,  102.4034, 75.8768],
  [49.0601,  35.5204,   47.5228,  34.0991],
  [198.9304, 143.7588, 196.8765, 142.7343],
  [85.582,   62.9647,  83.8372,  61.9163],
  [122.3738, 85.333,   120.7989, 83.9017],
  [71.865,   58.818,   70.3854,  57.1279],
  [143.9811, 91.6648,  142.2728, 91.1134],
  [102.9065, 72.3803,  101.078,  70.6343],
  [99.3422,  73.1008,  97.455,   71.9115],
  [108.4611, 75.7422,  108.0496, 75.7455],
  [95.6589,  69.3332,  92.8316,  66.6754],
  [71.0199,  50.6419,  61.036,   42.422],
  ]

print("Timber auctions results for each of 15 parameter settings:")
print("")
print("Welfare")
print("-------")
print("#   simul   sequential   descending (std err)   first-best (std err)")
for i in range(len(results)):
  print("%2d   %7.3f   %7.3f   %7.3f (%5.3f)   %7.3f (%5.3f)"
        % (i+1, rs_results[i][2], rs_results[i][0], results[i][0], std_errors[i][0], results[i][2], std_errors[i][2]))

print("")
print("Welfare as percent of first-best")
print("----------------------------------")
print("#   simul   sequential   descending")
for i in range(len(results)):
  opt = results[i][2]
  print("%2d   %7.2f   %7.2f   %7.2f"
        % (i+1, 100*rs_results[i][2]/opt, 100*rs_results[i][0]/opt, 100*results[i][0]/opt))

print("")
print("Revenue")
print("-------")
print("#   simul   sequential   descending (std err)")
for i in range(len(results)):
  print("%2d   %7.3f   %7.3f   %7.3f (%5.3f)"
        % (i+1, rs_results[i][3], rs_results[i][1], results[i][1], std_errors[i][1]))

print("")
print("Revenue as percent of descending")
print("----------------------------------")
print("#   simul   sequential")
for i in range(len(results)):
  desc = max(results[i][1], 0.01)
  print("%2d   %7.2f   %7.2f"
        % (i+1, 100*rs_results[i][3]/desc, 100*rs_results[i][1]/desc))

print("")
print("Percent of bidders inspecting")
print("------------------------------")
print("#   descending (std err)   opt (std err)")
for i in range(len(results)):
  print("%2d   %6.1f (%3.1f)   %6.1f (%3.1f)"
        % (i+1, 100*results[i][4], 100*std_errors[i][4], 100*results[i][5], 100*std_errors[i][5]))


width = 0.2
inds = np.arange(len(results))
one_inds = np.arange(1, len(results)+1)

## welfare plot
ax = plt.figure()
simul = plt.bar(one_inds, [rs_results[i][2] for i in inds], width, color='green')
seq = plt.bar(one_inds + width, [rs_results[i][0] for i in inds], width, color='black')
descend = plt.bar(one_inds + 2*width, [results[i][0] for i in inds], width, yerr=[std_errors[i][0] for i in inds], color='blue')
opt = plt.bar(one_inds + 3*width, [results[i][2] for i in inds], width, yerr=[std_errors[i][2] for i in inds], color='red')
plt.ylabel("welfare")
plt.xlabel("parameter set")
plt.legend([simul[0], seq[0], descend[0], opt[0]], ["Simultaneous", "Sequential", "Descending", "Opt"])
plt.xticks(one_inds)


## revenue plot
ax = plt.figure()
simul = plt.bar(one_inds, [rs_results[i][3] for i in inds], width, color='green')
seq = plt.bar(one_inds + width, [rs_results[i][1] for i in inds], width, color='black')
descend = plt.bar(one_inds + 2*width, [results[i][1] for i in inds], width, yerr=[std_errors[i][1] for i in inds], color='blue')
plt.ylabel("revenue")
plt.xlabel("parameter set")
plt.legend([simul[0], seq[0], descend[0]], ["Simultaneous", "Sequential", "Descending"])
plt.xticks(one_inds)

plt.show()
